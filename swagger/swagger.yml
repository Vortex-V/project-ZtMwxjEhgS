swagger: "2.0"
info:
  title: Simbir.GO
  description: |
    API сервиса для работы с арендой транспорта
  version: 1.0.0
host: localhost:8080
basePath: /api
schemes:
- http
paths:
  /Account/Me:
    get:
      tags:
      - Account
      description: |-
        получение данных о текущем аккаунте
        <br>
      operationId: AccountController.Me
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.AccountMeResponse'
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Account/SignIn:
    post:
      tags:
      - Account
      description: |-
        получение нового jwt токена пользователя
        <br>
      operationId: AccountController.SignIn
      parameters:
      - in: body
        name: body
        description: sign in request
        schema:
          $ref: '#/definitions/requests.AccountSignInRequest'
      responses:
        "200":
          description: '{"token":"string"}'
        "400":
          description: user or password is incorrect
  /Account/SignOut:
    post:
      tags:
      - Account
      description: |-
        выход из аккаунта
        <br>
      operationId: AccountController.SignOut
      responses:
        "200":
          description: ""
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Account/SignUp:
    post:
      tags:
      - Account
      description: |-
        регистрация нового аккаунта
        <br>
      operationId: AccountController.SignUp
      parameters:
      - in: body
        name: body
        description: sign up request
        schema:
          $ref: '#/definitions/requests.AccountSignUpRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.AccountResponse'
        "400":
          description: username already exists
  /Account/Update:
    put:
      tags:
      - Account
      description: |-
        обновление своего аккаунта
        <br>
      operationId: AccountController.Update
      parameters:
      - in: body
        name: body
        description: update request
        schema:
          $ref: '#/definitions/requests.AccountUpdateRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.AccountResponse'
        "400":
          description: username already exists
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Admin/Account/:
    get:
      tags:
      - Admin/Account
      description: |-
        Получение списка всех аккаунтов
        <br>
      operationId: AdminAccountController.GetAll
      parameters:
      - in: query
        name: start
        description: Начало выборки [применяет offset((start - 1) * count)]
        type: integer
        format: int64
        default: "1"
      - in: query
        name: count
        description: Размер выборки (по умолчанию 10)
        type: integer
        format: int64
        default: "10"
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/models.Account'
        "401":
          description: unauthorized
      security:
      - api_key: []
    post:
      tags:
      - Admin/Account
      description: |-
        Создание администратором нового аккаунта
        <br>
      operationId: AdminAccountController.Post
      parameters:
      - in: body
        name: body
        description: account info
        schema:
          $ref: '#/definitions/requests.AdminAccountWriteRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/models.Account'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Admin/Account/{id}:
    get:
      tags:
      - Admin/Account
      description: |-
        Получение информации об аккаунте по id
        <br>
      operationId: AdminAccountController.Get
      parameters:
      - in: path
        name: id
        description: accountId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.AdminAccountResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
    put:
      tags:
      - Admin/Account
      description: |-
        Изменение администратором аккаунта по id
        <br>
      operationId: AdminAccountController.Put
      parameters:
      - in: path
        name: id
        description: id
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: account info
        schema:
          $ref: '#/definitions/requests.AdminAccountWriteRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.AdminAccountResponse'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
    delete:
      tags:
      - Admin/Account
      description: |-
        Удаление аккаунта по id
        <br>
      operationId: AdminAccountController.Delete
      parameters:
      - in: path
        name: id
        description: id
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '{"message": "string"}'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Admin/Rent:
    post:
      tags:
      - Admin
      description: |-
        Создание новой аренды
        <br>
      operationId: AdminRentController.Post
      parameters:
      - in: body
        name: body
        description: rent info
        schema:
          $ref: '#/definitions/requests.AdminRentWriteRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Admin/Rent/{id}:
    get:
      tags:
      - Admin
      description: |-
        Получение информации об аренде по id
        <br>
      operationId: AdminRentController.Get
      parameters:
      - in: path
        name: rentId
        description: rentId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
    post:
      tags:
      - Admin
      description: |-
        Удаление информации об аренде по id
        <br>
      operationId: AdminRentController.Delete
      parameters:
      - in: path
        name: id
        description: rentId
        required: true
        type: integer
        format: int64
      responses:
        "201":
          description: ""
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Admin/Rent/End/{id}:
    post:
      tags:
      - Admin
      description: |-
        Завершение аренды транспорта по id аренды
        <br>
      operationId: AdminRentController.End
      parameters:
      - in: path
        name: rentId
        description: rentId
        required: true
        type: integer
        format: int64
      - in: query
        name: lat
        description: Географическая широта местонахождения транспорта
        required: true
        type: number
        format: double
      - in: query
        name: long
        description: Географическая долгота местонахождения транспорта
        required: true
        type: number
        format: double
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Admin/Transport/:
    get:
      tags:
      - Admin/Transport
      description: |-
        Получение списка всех транспортных средств
        <br>
      operationId: AdminTransportController.GetAll
      parameters:
      - in: query
        name: start
        description: Начало выборки [применяет offset((start - 1) * count)]
        type: integer
        format: int64
        default: "1"
      - in: query
        name: count
        description: Размер выборки
        type: integer
        format: int64
        default: "10"
      - in: query
        name: transportType
        description: Тип транспорта [Car, Bike, Scooter, All]
        type: string
        default: All
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "401":
          description: unauthorized
      security:
      - api_key: []
    post:
      tags:
      - Admin/Transport
      description: |-
        Создание нового транспортного средства
        <br>
      operationId: AdminTransportController.Post
      parameters:
      - in: body
        name: body
        description: transport info
        schema:
          $ref: '#/definitions/requests.AdminTransportWriteRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/models.Transport'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Admin/Transport/{id}:
    get:
      tags:
      - Admin/Transport
      description: |-
        Получение информации о транспортном средстве по id
        <br>
      operationId: AdminTransportController.Get
      parameters:
      - in: path
        name: id
        description: transportId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: '"Указанный объект может быть получен по ключу data"'
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
      security:
      - api_key: []
    put:
      tags:
      - Admin/Transport
      description: |-
        Изменение транспортного средства по id
        <br>
      operationId: AdminTransportController.Put
      parameters:
      - in: path
        name: id
        description: id
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: transport info
        schema:
          $ref: '#/definitions/requests.AdminTransportWriteRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
    delete:
      tags:
      - Admin/Transport
      description: |-
        Удаление транспорта по id
        <br>
      operationId: AdminTransportController.Delete
      parameters:
      - in: path
        name: id
        description: id
        required: true
        type: integer
        format: int64
      responses:
        "201":
          description: ""
        "400":
          description: :id is empty
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Admin/TransportHistory/{id}:
    get:
      tags:
      - Admin
      description: |-
        Получение истории аренд транспорта с id={transportId}
        <br>
      operationId: AdminRentController.TransportHistory
      parameters:
      - in: path
        name: transportId
        description: transportId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Admin/UserHistory/{id}:
    get:
      tags:
      - Admin
      description: |-
        Получение истории аренд пользователя с id={userId}
        <br>
      operationId: AdminRentController.UserHistory
      parameters:
      - in: path
        name: userId
        description: userId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Payment/Hesoyam/{id}:
    post:
      tags:
      - Payment
      description: |-
        Добавляет на баланс аккаунта с id={accountId} 250 000 денежных единиц.
        <br>
      operationId: PaymentController.Post
      parameters:
      - in: path
        name: id
        description: accountId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Rent/{rentId}:
    get:
      tags:
      - Rent
      description: |-
        Получение информации об аренде по id
        <br>
      operationId: RentController.Get
      parameters:
      - in: path
        name: rentId
        description: rentId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Rent/End/{rentId}:
    post:
      tags:
      - Rent
      description: |-
        Завершение аренды транспорта по id аренды
        <br>
      operationId: RentController.End
      parameters:
      - in: path
        name: rentId
        description: rentId
        required: true
        type: integer
        format: int64
      - in: query
        name: lat
        description: Географическая широта местонахождения транспорта
        required: true
        type: number
        format: double
      - in: query
        name: long
        description: Географическая долгота местонахождения транспорта
        required: true
        type: number
        format: double
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Rent/MyHistory:
    get:
      tags:
      - Rent
      description: |-
        Получение истории аренд текущего аккаунта
        <br>
      operationId: RentController.MyHistory
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Rent/New/{transportId}:
    post:
      tags:
      - Rent
      description: |-
        Аренда транспорта в личное пользование
        <br>
      operationId: RentController.New
      parameters:
      - in: path
        name: transportId
        description: transportId
        required: true
        type: integer
        format: int64
      - in: query
        name: rentType
        description: Тип аренды [Minutes, Days]
        required: true
        type: string
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: invalid params
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Rent/Transport:
    get:
      tags:
      - Rent
      description: |-
        Получение транспорта доступного для аренды по параметрам
        <br>
      operationId: RentController.Transport
      parameters:
      - in: query
        name: lat
        description: Географическая широта местонахождения транспорта
        required: true
        type: number
        format: double
      - in: query
        name: long
        description: Географическая долгота местонахождения транспорта
        required: true
        type: number
        format: double
      - in: query
        name: radius
        description: Радиус круга поиска транспорта
        required: true
        type: number
        format: double
      - in: query
        name: type
        description: Тип транспорта [Car, Bike, Scooter, All]
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: invalid params
        "404":
          description: not found
  /Rent/TransportHistory/{transportId}:
    get:
      tags:
      - Rent
      description: |-
        Получение истории аренд транспорта
        <br>
      operationId: RentController.TransportHistory
      parameters:
      - in: path
        name: transportId
        description: transportId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: Список из указанных объектов может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.RentResponse'
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "404":
          description: not found
      security:
      - api_key: []
  /Transport/:
    post:
      tags:
      - Transport
      description: |-
        Добавление нового транспорта
        <br>
      operationId: TransportController.Post
      parameters:
      - in: body
        name: body
        description: transport info
        schema:
          $ref: '#/definitions/requests.TransportPostRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
      security:
      - api_key: []
  /Transport/{id}:
    get:
      tags:
      - Transport
      description: |-
        Получение информации о транспорте по id
        <br>
      operationId: TransportController.Get
      parameters:
      - in: path
        name: id
        description: transportId
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: :id is empty
        "404":
          description: not found
    put:
      tags:
      - Transport
      description: |-
        Изменение транспорта по id
        <br>
      operationId: TransportController.Put
      parameters:
      - in: path
        name: id
        description: transportId
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: transport info
        schema:
          $ref: '#/definitions/requests.TransportPutRequest'
      responses:
        "200":
          description: Указанный объект может быть получен по ключу data
          schema:
            $ref: '#/definitions/responses.TransportResponse'
        "400":
          description: body is invalid
        "401":
          description: unauthorized
        "403":
          description: user is not owner
        "404":
          description: not found
      security:
      - api_key: []
    delete:
      tags:
      - Transport
      description: |-
        Удаление транспорта по id
        <br>
      operationId: TransportController.Delete
      parameters:
      - in: path
        name: id
        description: transportId
        required: true
        type: integer
        format: int64
      responses:
        "201":
          description: ""
        "400":
          description: :id is empty
        "401":
          description: unauthorized
        "403":
          description: user is not owner
        "404":
          description: not found
      security:
      - api_key: []
definitions:
  models.Account:
    title: Account
    type: object
    properties:
      Balance:
        type: number
        format: double
      CreatedAt:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      IsNeedRelogin:
        type: boolean
      Password:
        type: string
      Rents:
        type: array
        items:
          $ref: '#/definitions/models.Rent'
      Status:
        type: integer
        format: int64
      Type:
        type: integer
        format: int64
      UpdatedAt:
        type: string
        format: datetime
      Username:
        type: string
  models.Rent:
    title: Rent
    type: object
    properties:
      Account:
        $ref: '#/definitions/models.Account'
      CreatedAt:
        type: string
        format: datetime
      FinalPrice:
        type: number
        format: double
      Id:
        type: integer
        format: int64
      PriceOfUnit:
        type: number
        format: double
      Status:
        type: string
      TimeEnd:
        type: string
        format: datetime
      TimeStart:
        type: string
        format: datetime
      Transport:
        $ref: '#/definitions/models.Transport'
      Type:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.Transport:
    title: Transport
    type: object
    properties:
      Account:
        $ref: '#/definitions/models.Account'
      CanBeRented:
        type: boolean
      Color:
        type: string
      CreatedAt:
        type: string
        format: datetime
      DayPrice:
        type: number
        format: double
      Description:
        type: string
      Id:
        type: integer
        format: int64
      Identifier:
        type: string
      Latitude:
        type: number
        format: double
      Longitude:
        type: number
        format: double
      MinutePrice:
        type: number
        format: double
      Model:
        type: string
      Type:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.model:
    title: model
    type: object
  requests.AccountSignInRequest:
    title: AccountSignInRequest
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  requests.AccountSignUpRequest:
    title: AccountSignUpRequest
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  requests.AccountUpdateRequest:
    title: AccountUpdateRequest
    type: object
    properties:
      password:
        type: string
      username:
        type: string
  requests.AdminAccountWriteRequest:
    title: AdminAccountWriteRequest
    type: object
    properties:
      balance:
        type: number
        format: double
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
  requests.AdminRentWriteRequest:
    title: AdminRentWriteRequest
    type: object
    properties:
      finalPrice:
        type: number
        format: double
      priceOfUnit:
        type: number
        format: double
      priceType:
        type: string
      timeEnd:
        type: string
      timeStart:
        type: string
      transportId:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
  requests.AdminTransportWriteRequest:
    title: AdminTransportWriteRequest
    type: object
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
        format: double
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
      minutePrice:
        type: number
        format: double
      model:
        type: string
      ownerId:
        type: integer
        format: int64
      transportType:
        type: string
  requests.TransportPostRequest:
    title: TransportPostRequest
    type: object
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
        format: double
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
      minutePrice:
        type: number
        format: double
      model:
        type: string
      transportType:
        type: string
  requests.TransportPutRequest:
    title: TransportPutRequest
    type: object
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
        format: double
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
      minutePrice:
        type: number
        format: double
      model:
        type: string
  requests.request:
    title: request
    type: object
  responses.AccountMeResponse:
    title: AccountMeResponse
    type: object
    properties:
      Balance:
        type: number
        format: double
      Id:
        type: integer
        format: int64
      Username:
        type: string
  responses.AccountResponse:
    title: AccountResponse
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Username:
        type: string
  responses.AdminAccountResponse:
    title: AdminAccountResponse
    type: object
    properties:
      Balance:
        type: number
        format: double
      Id:
        type: integer
        format: int64
      Password:
        type: string
      Type:
        type: string
      Username:
        type: string
  responses.RentResponse:
    title: RentResponse
    type: object
    properties:
      AccountId:
        type: integer
        format: int64
      FinalPrice:
        type: number
        format: double
      Id:
        type: integer
        format: int64
      PriceOfUnit:
        type: number
        format: double
      Status:
        type: string
      TimeEnd:
        type: string
      TimeStart:
        type: string
      TransportId:
        type: integer
        format: int64
      Type:
        type: string
  responses.TransportResponse:
    title: TransportResponse
    type: object
    properties:
      CanBeRented:
        type: boolean
      Color:
        type: string
      DayPrice:
        type: number
        format: double
      Description:
        type: string
      Id:
        type: integer
        format: int64
      Identifier:
        type: string
      Latitude:
        type: number
        format: double
      Longitude:
        type: number
        format: double
      MinutePrice:
        type: number
        format: double
      Model:
        type: string
      OwnerId:
        type: integer
        format: int64
      TransportType:
        type: string
  responses.response:
    title: response
    type: object
securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
tags:
- name: Account
  description: |
    AccountController operations for Account
- name: Transport
  description: |
    TransportController operations for /Transport
- name: Rent
  description: |
    RentController operations for /Rent
- name: Payment
  description: |
    PaymentController operations for Transports
- name: Admin/Account
  description: |
    AdminAccountController operations for Admin/Account
- name: Admin/Transport
  description: |
    AdminTransportController operations for /Admin/Transport
- name: Admin
  description: |
    AdminRentController operations for /Admin/Rent
